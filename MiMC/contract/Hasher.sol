//SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

contract Hasher {
    uint8 nRounds = 10;
    uint256 p =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;

    uint256[10] c = [
        0,
        64228696615759389950474601679998292470791550544538870065883609921663534907139,
        78209260332770778773319413348592117998042705103700904950993402100592869554880,
        22880489223075839407044791102969933705479665776612329621477281323625231077253,
        41229464592137047097874059277097229686789205354623302238211120266719092123307,
        63917333021463987418074499497389941797571181592331844394451870847991872033857,
        75644209180148766283116108138476048080232899182291819585101264012871006431118,
        38883689591504716302965332353735660078194185221483320565397139786572154124721,
        57726783562264514826052208239470516694500297754924484808502889054632579961272,
        86598749469050366291610824062120258617896720333081536948210026090632723276100
    ];

    function MiMC5(uint256 x, uint256 k) public view returns (uint256 h) {
        uint256 lastOutput = x;

        uint256 base;
        uint256 base2;
        uint256 base4;

        for (uint8 i; i < nRounds; i++) {
            base = addmod(lastOutput, k, p);
            base = addmod(base, c[i], p);

            base2 = mulmod(base, base, p);
            base4 = mulmod(base2, base2, p);

            lastOutput = mulmod(base4, base, p);
        }

        h = addmod(lastOutput, k, p);
    }
}
