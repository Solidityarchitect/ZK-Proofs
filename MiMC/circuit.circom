pragma circom 2.0.0;

template MiMC5() {
    signal input x;
    signal input k;
    signal output h;

    var nRounds = 10;

    var c[nRounds] = [
    0,
    64228696615759389950474601679998292470791550544538870065883609921663534907139,
    78209260332770778773319413348592117998042705103700904950993402100592869554880,
    22880489223075839407044791102969933705479665776612329621477281323625231077253,
    41229464592137047097874059277097229686789205354623302238211120266719092123307,
    63917333021463987418074499497389941797571181592331844394451870847991872033857,
    75644209180148766283116108138476048080232899182291819585101264012871006431118,
    38883689591504716302965332353735660078194185221483320565397139786572154124721,
    57726783562264514826052208239470516694500297754924484808502889054632579961272,
    86598749469050366291610824062120258617896720333081536948210026090632723276100
    ];

    signal lastOutput[nRounds + 1];
    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutput[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutput[i + 1] <== base4[i] * base[i];
    }

    h <== lastOutput[nRounds] + k;

}

component main = MiMC5();