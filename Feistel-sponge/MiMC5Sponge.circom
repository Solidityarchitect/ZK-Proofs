pragma circom 2.0.0;

template MiMC5Feistel() {
    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var nRounds = 20;
    var c[20] = [
    0,
    107964100413013518483817657208990158332371541865147543707556738589353437821359,
    112078268649971997388900631920467998674350622824011486453926067602158606226430,
    102583004973290695862497994575164133407160265548194054327707526842043205340151,
    100569248575847921970554423405240998101983482439114565806625094709124088057480,
    84923990841421387682400203500880331276648096911356656196107552492896509666348,
    52456280721049226559254541701142861130162839151869614632722384034703529342111,
    17727819923419610008084777412776773287595500465116519348232454653839415993922,
    79800188750490948266471201456056895997328788343831730830518719924429831275418,
    68360275495183823907681716907510756903153205255368781616665962164352130999807,
    40519862246775104498874987306548030030192067811119822988978429646268777408314,
    67054066843312032176552873681041321513975500822086962941000975266559683102470,
    55411816244978575265723902893062587367029401624571788088372501670532002671808,
    88327354647721888091236159823191069470479347645638890300309346431335882934587,
    112041657231932617704785489889660339474509355475615605834800234267129282540114,
    105241601653646168926905270679124503304869989045305231748334949579775815388898,
    80796737494721353359877427591446412286267927412004461310670401033724809500446,
    21321219824694596088858425130701660984186398576841703754434851930717297340202,
    41940125810909597893947751512175203853520170378681283848588396066927196345610,
    78022317632614559877895979273736940147012903330947867298245030189783871010620
    ];

    signal lastOutputL[nRounds + 1];
    signal lastOutputR[nRounds + 1];

    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutputL[0] <== iL;
    lastOutputR[0] <== iR;

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutputR[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutputR[i + 1] <== lastOutputL[i] + base4[i] * base[i];
        lastOutputL[i + 1] <== lastOutputR[i];
    }

    oL <== lastOutputL[nRounds];
    oR <== lastOutputR[nRounds];
}
template MiMC5Sponge(nInputs) {
    signal input k;
    signal input ins[nInputs];
    signal output o;

    signal lastR[nInputs + 1];
    signal lastC[nInputs + 1];

    lastR[0] <== 0;
    lastC[0] <== 0;

    component layers[nInputs];

    for(var i = 0; i < nInputs; i++){
        layers[i] = MiMC5Feistel();

        layers[i].iL <== lastR[i] + ins[i];
        layers[i].iR <== lastC[i];
        layers[i].k <== k;

        lastR[i + 1] <== layers[i].oL;
        lastC[i + 1] <== layers[i].oR;
    }

    o <== lastR[nInputs];
}
component main = MiMC5Sponge(2);